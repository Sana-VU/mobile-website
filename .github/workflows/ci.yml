name: CI

on:
  push:
    branches: [test]
  pull_request:
    branches: [main]

# Cancel in-flight runs when a new workflow with the same group name is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Enable pnpm caching
  STORE_PATH: ""

jobs:
  lint-typecheck-build:
    name: "Lint, Typecheck & Build"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type checking
        run: pnpm run typecheck

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Build application
        run: pnpm run build
        env:
          # Disable telemetry during build
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Setup test database
        run: |
          # Create test database and run migrations
          pnpm exec prisma db push --force-reset
        env:
          DATABASE_URL: file:./test.db

      - name: Run unit tests
        run: pnpm run test
        env:
          # Use test database for tests
          DATABASE_URL: file:./test.db

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  e2e-tests:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Only run E2E tests on pull requests
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Setup test database
        run: |
          # Create test database and seed with test data
          pnpm exec prisma db push --force-reset
          pnpm run seed
        env:
          DATABASE_URL: file:./test.db

      - name: Build application for E2E tests
        run: pnpm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          DATABASE_URL: file:./test.db

      - name: Run Playwright E2E tests
        run: pnpm run test:e2e
        env:
          DATABASE_URL: file:./test.db
          # Playwright specific environment variables
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 7

  # Summary job that depends on all other jobs
  ci-success:
    name: "CI Success"
    runs-on: ubuntu-latest
    needs: [lint-typecheck-build, unit-tests]
    if: always()

    steps:
      - name: Check job status
        run: |
          if [[ "${{ needs.lint-typecheck-build.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "✅ All required CI jobs passed!"
            exit 0
          else
            echo "❌ Some CI jobs failed:"
            echo "  - Lint/Typecheck/Build: ${{ needs.lint-typecheck-build.result }}"
            echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
            exit 1
          fi

  # Optional E2E success check for PRs
  ci-success-with-e2e:
    name: "CI Success (with E2E)"
    runs-on: ubuntu-latest
    needs: [lint-typecheck-build, unit-tests, e2e-tests]
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Check job status including E2E
        run: |
          if [[ "${{ needs.lint-typecheck-build.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All CI jobs (including E2E) passed!"
            exit 0
          else
            echo "❌ Some CI jobs failed:"
            echo "  - Lint/Typecheck/Build: ${{ needs.lint-typecheck-build.result }}"
            echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
            echo "  - E2E Tests: ${{ needs.e2e-tests.result }}"
            exit 1
          fi
